import { createServerClient } from '@supabase/ssr'
import { NextResponse } from 'next/server'
import { cookies } from 'next/headers'
import { createClient } from '@supabase/supabase-js'

// Client admin pour bypass RLS
const supabaseAdmin = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!,
  {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  }
)

export async function POST(request: Request) {
  try {
    const cookieStore = await cookies()

    // Cr√©er client Supabase SSR pour r√©cup√©rer l'utilisateur
    const supabase = createServerClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
      {
        cookies: {
          getAll() {
            return cookieStore.getAll()
          },
          setAll() {},
        },
      }
    )

    // R√©cup√©rer l'utilisateur authentifi√©
    const { data: { user }, error: authError } = await supabase.auth.getUser()

    if (authError || !user) {
      console.log('‚ùå Non authentifi√©:', authError?.message)
      return NextResponse.json({ error: 'Non authentifi√©' }, { status: 401 })
    }

    console.log('‚úÖ User authentifi√©:', user.email)

    // R√©cup√©rer les donn√©es de la requ√™te
    const body = await request.json()
    const { factureData, lignes } = body

    console.log('üìù Donn√©es re√ßues:', { factureData, lignes })

    if (!factureData || !lignes) {
      return NextResponse.json({ error: 'Donn√©es manquantes' }, { status: 400 })
    }

    // Utiliser le client admin pour cr√©er la facture (bypass RLS)
    const { data: facture, error: factureError } = await supabaseAdmin
      .from('factures')
      .insert([factureData])
      .select()
      .single()

    if (factureError) {
      console.error('‚ùå Erreur insertion facture:', factureError)
      return NextResponse.json({ error: 'Erreur cr√©ation facture', details: factureError }, { status: 500 })
    }

    console.log('‚úÖ Facture cr√©√©e:', facture.id)

    // Cr√©er les lignes de facture
    const lignesAvecFacture = lignes.map((ligne: any) => ({
      ...ligne,
      facture_id: facture.id
    }))

    const { error: lignesError } = await supabaseAdmin
      .from('facture_lignes')
      .insert(lignesAvecFacture)

    if (lignesError) {
      console.error('‚ùå Erreur insertion lignes:', lignesError)
      // Ne pas √©chouer compl√®tement, la facture est d√©j√† cr√©√©e
      console.log('‚ö†Ô∏è Facture cr√©√©e mais lignes non enregistr√©es')
    }

    console.log('‚úÖ Facture compl√®te cr√©√©e avec succ√®s')

    return NextResponse.json({
      facture: facture,
      message: 'Facture cr√©√©e avec succ√®s'
    })

  } catch (error) {
    console.error('Erreur API /api/factures/creer:', error)
    return NextResponse.json({ error: 'Erreur serveur' }, { status: 500 })
  }
}

